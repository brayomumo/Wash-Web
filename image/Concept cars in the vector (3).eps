%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 12.0.0
%%For: (LeoDor) ()
%%Title: (white car silhouette.eps)
%%CreationDate: 12/5/2010 3:26 PM
%%BoundingBox: 1 39 842 573
%%HiResBoundingBox: 1.52979 39.2002 841.79 572.7598
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%DocumentCustomColors: (_201710944)
%%+ (_204599592)
%%+ (_204599736)
%%CMYKCustomColor: 0.74902 0.678431 0.670588 0.901961 ([Registration])
%%+ 0 0.992157 1 0 (_201710944)
%%+ 0 0 0 0 (_204599592)
%%+ 0.74902 0.678431 0.670588 0.901961 (_204599736)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 420 297 420 297
%AI3_TileBox: 10.7852 11.1977 829.4251 583.1177
%AI3_DocumentPreview: Header
%AI5_ArtSize: 841 595
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -201.5 627.5 1 1259 678 26 0 0 10 141 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
1 Bn
%AI5_BeginGradient: (Linear Gradient 1)
(Linear Gradient 1) 0 2 Bd
[
0
<
00000102030405060708090B0C0D0E0F101213141617191A1B1D1E1F20222324252728292A2C2D2E
2F313234353637393A3B3C3D3F40424344454748494A4C4D4E4F515254555658595B5C5D5E606162
63646667686A6B6C6E6F707273747677787A7B7C7E7F80818384858688898A8B8D8E8F9092939596
97999A9C9D9EA0A1A3A4A5A7A8A9AAABADAEAFB0B1B2B3B5B6B7B8B9BABBBCBDBFC0C1C2C3C4C5C6
C7C7C8C9CACBCCCDCECFD0D1D2D3D4D5D5D6D7D8D9DADBDBDCDDDEDFDFE0E1E2E2E3E4E5E5E6E7E7
E8E9E9EAEAEBECECEDEDEEEEEFEFF0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F8F9F9F9F9FAFAFAFB
FBFBFBFBFCFCFCFCFCFCFDFDFDFDFDFD
>
<
0000000001010202020303030404050506060707080809090A0B0B0C0D0D0E0F0F10101111121213
1314151616171818191A1B1B1C1D1D1E1F1F202122222324242526272728292A2B2C2D2D2E2F3031
323233343536373738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525455565758
595A5B5C5E5F60616364656768696B6C6D6F70717274757677797A7C7D7E808183848687898A8C8D
8F909293959698999B9D9EA0A1A3A4A6A7A9AAACADAFB0B2B3B5B6B7B9BABCBDBFC0C2C3C5C7C8CA
CCCECFD1D2D4D5D7D8DADBDCDEDFE0E2E3E4E5E7E8E9EBECEDEFF0F2F3F5F6F7F8F9FAFBFCFDFEFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
0
1
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
4 %_Br
[
0 0.992157 1 0 1 0 0 2 50 100 %_BS
%_0 0.992157 1 0 1 0 0 2 50 100 Bs
0 0 0 0 1 1 1 2 50 0 %_BS
%_0 0 0 0 1 1 1 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
0 0.992157 1 0 1 0 0 (_201710944) 0 1 Xx
(_201710944)
Pc
0 0 0 0 1 1 1 (_204599592) 0 1 Xx
(_204599592)
Pc
0.74902 0.678431 0.670588 0.901961 0 0 0 (_204599736) 0 1 Xx
(_204599736)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 100 Lb
(Layer 1) Ln
0 A
0 O
0.74902 0.678431 0.670588 0.901961 0 0 0 (_204599736) 0 1 Xx
0 J 0 j 2 w 10 M []0 d1 XR
2.18994 571.9502 m
2.18994 40.0996 l
840.8896 40.0996 l
840.8896 571.9502 l
2.18994 571.9502 l
f
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
0 XR
2.18994 571.9502 m
2.47021 438.9902 l
2.64014 306.0298 l
2.77002 173.0596 l
2.85986 40.0996 l
2.18994 40.7695 l
211.8701 40.8799 l
421.54 40.9502 l
631.21 40.9902 l
840.8896 41 l
839.9902 40.0996 l
839.9902 173.0596 l
840.0098 306.0298 l
840.04 438.9902 l
840.0801 571.9502 l
840.8896 571.1401 l
631.21 571.23 l
421.54 571.3599 l
211.8701 571.5698 l
2.18994 571.9399 l
2.2002 571.9502 l
282.0298 572.5698 561.8701 572.6499 841.7002 572.7598 c
841.75 394.9102 841.7803 217.0596 841.79 39.2002 c
561.7002 39.21 281.6099 39.2695 1.52979 39.4297 c
1.6499 216.9404 1.75977 394.4502 2.18994 571.9502 c
f
0 0 0 0 1 1 1 (_204599592) 0 1 Xx
1 J 1 j 4 w95.5098 328.5098 m
102.3198 333.73 109.4302 338.4502 116.79 342.8599 c
123.9399 347.1401 131.3599 351.1001 138.8799 354.6899 c
155.3701 362.5601 172.48 368.8501 190.0898 373.75 c
199.6299 376.3999 209.2202 378.5801 218.9302 380.5 c
235.4102 383.7598 252.1099 385.7402 268.8398 387.1001 c
268.8198 387.1001 l
269.9399 387.2002 271.0498 387.2998 272.1802 387.2998 c
276.2202 387.29 279.6401 386.6899 283.3701 385.1099 c
283.3198 385.1299 283.2798 385.1499 283.2402 385.1602 c
292 382.3901 301.1299 380.5698 310.23 379.3301 c
317.6499 378.3198 325.0698 377.5601 332.5498 377.02 c
338.3701 376.6001 344.2002 376.2798 350.0298 376.0298 c
351.77 375.9502 353.5098 375.8701 355.25 375.7998 c
356.29 375.75 357.3501 375.6802 358.3901 375.6802 c
357.3198 375.5601 356.21 375.52 355.1299 375.4702 c
353.75 375.3999 352.3599 375.3398 350.98 375.2998 c
346.4199 375.1499 341.8701 375.1099 337.3101 375.1699 c
330.6401 375.25 324.04 375.5898 317.3999 376.0898 c
311.1802 376.5498 304.8701 377.3301 298.73 378.3901 c
294.1602 379.1699 289.5601 380.1099 285.1001 381.3599 c
284.1602 381.6201 283.23 381.8901 282.2998 382.1699 c
282.04 382.25 281.77 382.3799 281.52 382.48 c
281.02 382.6699 280.52 382.8398 280.0098 383 c
278.4302 383.4902 276.6201 383.8301 274.96 383.9399 c
273.9302 384.0098 272.9199 384.04 271.8901 384.0098 c
270.0698 383.9399 268.1802 383.7002 266.3701 383.5298 c
263.4302 383.2598 260.48 382.9702 257.5498 382.6401 c
246.1099 381.3398 234.77 379.77 223.4399 377.6899 c
217.4102 376.5898 211.3799 375.3501 205.3999 373.98 c
201.77 373.1499 198.1602 372.25 194.5498 371.3301 c
191.96 370.6802 189.3701 369.96 186.7998 369.23 c
185.1401 368.7598 183.4702 368.2998 181.8198 367.79 c
178.5601 366.79 175.3101 365.7998 172.0601 364.73 c
168.7002 363.6401 165.3901 362.4502 162.0601 361.27 c
159.7402 360.4502 157.4102 359.5601 155.1201 358.6602 c
149.9302 356.6099 144.8301 354.4902 139.7202 352.2202 c
130.1699 347.9902 120.9102 343.1899 111.7798 338.1099 c
106.2798 335.04 100.9102 331.75 95.5098 328.5098 c
f
2 w416.6602 430.8101 m
421.8496 430.5898 427.0303 430.3398 432.21 430.02 c
446.75 429.1299 461.3301 427.7402 475.7695 425.8501 c
485.29 424.6099 494.8096 423.1899 504.25 421.46 c
510.54 420.3101 516.7998 419.0698 523.0498 417.71 c
528.5996 416.5 534.0801 415.1499 539.5898 413.7798 c
541.8096 413.2202 544.0303 412.6099 546.25 412.0098 c
549.2598 411.1802 552.2695 410.3301 555.2598 409.4302 c
563.3496 406.98 571.4297 404.3901 579.3301 401.3799 c
579.5996 401.2798 579.8799 401.1099 580.1504 400.98 c
580.7803 400.6699 581.4199 400.3599 582.0498 400.04 c
583.79 399.1802 585.5195 398.3198 587.2305 397.4199 c
588.8301 396.5801 590.6201 395.6499 592.1201 394.6299 c
592.8604 394.1201 593.6299 393.6299 594.2998 393.0298 c
594.9697 392.4199 595.9502 391.46 596.0596 390.5098 c
596.0898 390.21 596.1201 389.9502 596.04 389.6499 c
595.5195 387.7402 592.6396 387.21 590.9902 386.9502 c
590.5 386.8701 590 386.7998 589.5 386.75 c
588.6699 386.6802 587.8398 386.6099 587.0098 386.5298 c
586.4697 386.4902 585.9404 386.4399 585.4004 386.3999 c
574.1504 385.46 562.9004 384.6802 551.6396 383.96 c
542.6504 383.3799 533.6602 382.8799 524.6699 382.4102 c
506.8496 381.48 489.0303 380.6602 471.2002 379.9102 c
444.6504 378.7998 418.0898 377.79 391.5298 376.8501 c
383.7402 376.5801 375.96 376.3501 368.1802 376.1001 c
382.8901 377.1001 397.6401 377.7998 412.3701 378.5498 c
449.21 380.4502 486.0801 381.9902 522.9102 384.0498 c
545.1504 385.29 567.4199 386.5898 589.6104 388.5601 c
589.5996 388.5601 589.5898 388.5601 589.5801 388.5601 c
590.4004 388.6499 591.29 388.7798 592.0898 388.98 c
592.7002 389.1401 593.3496 389.3198 593.8896 389.6499 c
593.9805 389.71 594.2695 389.9199 594.29 390.04 c
594.3896 390.5601 593.4297 391.4399 593.0703 391.73 c
591.5098 393.04 589.5596 394.1602 587.7695 395.1299 c
587.1699 395.4502 586.5801 395.77 585.9805 396.0898 c
585.3496 396.4199 584.71 396.7402 584.0801 397.0601 c
583.4297 397.3901 582.7695 397.7202 582.1104 398.0498 c
580.9502 398.6201 579.7803 399.2002 578.6299 399.7798 c
578.6504 399.77 578.6797 399.75 578.71 399.75 c
577.1699 400.2998 575.6396 400.8901 574.0898 401.4399 c
571.2002 402.48 568.2998 403.48 565.3896 404.4502 c
555.0303 407.9102 544.5098 410.9102 533.9102 413.5698 c
507.3203 420.2402 480.1396 424.5698 452.9004 427.5601 c
440.8496 428.8799 428.7598 429.9102 416.6602 430.8101 c
f
293 388.1099 m
304.98 393.5898 317 398.9399 329.1001 404.1299 c
337.4399 407.7002 345.8101 411.25 354.25 414.5698 c
365.7202 419.0801 377.23 423.4199 388.9902 427.1201 c
398.1001 429.98 407.29 432.5298 416.6201 434.5698 c
423.79 436.1299 430.9502 437.3701 438.2197 438.3701 c
441.9199 438.8799 445.6797 439.2998 449.4102 439.6001 c
451.6797 439.7798 453.9502 439.96 456.2305 440.1099 c
458.0703 440.2202 459.9199 440.29 461.7695 440.3799 c
464.1602 440.5 466.6104 440.5601 469.0098 440.5801 c
474.3398 440.6099 479.6201 440.5601 484.9404 440.3501 c
497.7998 439.8501 510.54 438.4702 523.2695 436.6899 c
526.5098 436.2402 529.7402 435.71 532.9697 435.1899 c
540.4102 433.9902 547.8604 432.5698 555.2305 431.0098 c
557.6396 430.5 560.04 429.9702 562.4502 429.4399 c
563.6699 429.1699 564.8896 428.8599 566.1201 428.6001 c
564.1299 428.9199 562.1396 429.2998 560.1504 429.6602 c
556.9404 430.2402 553.7197 430.79 550.5 431.3599 c
541.9297 432.8599 533.3301 434.1499 524.71 435.3198 c
505.79 437.8599 486.5195 439.3101 467.4199 438.8501 c
460.7998 438.6899 454.2402 438.2798 447.6396 437.6602 c
431.4199 436.1499 415.2402 432.8599 399.5698 428.46 c
386.3799 424.7598 373.4502 420.27 360.6401 415.4502 c
344.8999 409.52 329.3301 403.0498 313.79 396.6099 c
306.8799 393.7402 299.96 390.8799 293 388.1099 c
f
484.2695 437.04 m
485.4502 437.1001 486.6201 437.1802 487.7998 437.2202 c
488.9902 437.25 490.1797 437.25 491.3701 437.2598 c
495.5195 437.2598 499.7695 436.9902 503.9004 436.6299 c
508.6104 436.2202 513.3398 435.7002 518.0195 435.0298 c
522.25 434.4199 526.4502 433.7798 530.6699 433.0898 c
539.1396 431.7002 547.5801 430.02 555.9902 428.29 c
570.0098 425.3901 583.9502 422.1001 597.8496 418.6899 c
617.4004 413.8901 636.8496 408.6499 656.2598 403.3101 c
660.9404 402.02 665.6104 400.6899 670.2803 399.3799 c
680.7695 396.4502 691.25 393.4199 701.6904 390.3398 c
705.5996 389.1899 709.5098 388.0498 713.4199 386.8901 c
714.7197 386.5098 716.0195 386.1201 717.3301 385.73 c
717.8496 385.5698 718.4102 385.4399 718.9199 385.2598 c
719.1602 385.1802 719.4199 385.0601 719.6602 384.96 c
720.2002 384.73 720.75 384.5098 721.29 384.27 c
722.6904 383.6499 724.0801 383.0298 725.4805 382.3799 c
730.6504 379.9502 735.7695 376.8799 740.21 373.27 c
741 372.6299 741.79 371.96 742.54 371.2798 c
742.7305 371.1099 743.2402 370.71 743.2803 370.46 c
743.3398 370.0898 743.2803 369.5801 743.2803 369.1899 c
743.2695 368.3101 743.2402 367.4302 743.21 366.5601 c
743.1201 363.77 742.9902 360.98 742.8203 358.2002 c
742.2695 349.3901 741.2803 340.54 740.0195 331.8101 c
739.6602 329.2598 739.2695 326.7202 738.8701 324.1699 c
738.6699 322.9502 738.4502 321.73 738.2598 320.5 c
738.4902 322.6401 738.7695 324.7798 739.0303 326.9199 c
739.6504 332.1899 740.2305 337.48 740.71 342.77 c
741.3203 349.5 741.79 356.2798 741.9902 363.04 c
742.0596 365.4702 742.0801 367.8999 742.1104 370.3301 c
742.1104 370.1602 742.1797 369.9902 742.3096 369.8799 c
741.4199 370.6499 740.5498 371.4102 739.6396 372.1499 c
737.7002 373.6899 735.6699 375.1201 733.5703 376.4199 c
730.29 378.46 726.7598 380.29 723.2305 381.8398 c
721.6201 382.54 720.0195 383.2002 718.4004 383.8701 c
718.4297 383.8599 718.4502 383.8501 718.4805 383.8398 c
669.5596 397.8901 620.5801 411.8198 571.0195 423.4302 c
562.5498 425.4102 554.0303 427.3101 545.5 429.04 c
538.1602 430.52 530.8096 431.9702 523.4102 433.2002 c
517.2803 434.2202 511.1504 435.1401 504.9697 435.8501 c
499.7598 436.4502 494.4502 436.9302 489.1904 437.0298 c
487.5498 437.0698 485.9199 437.0601 484.2695 437.04 c
f
272.6201 277.4004 m
274.2798 277.46 275.9302 277.54 277.5898 277.5996 c
282.2202 277.7695 286.8398 277.9004 291.4702 278.0098 c
302.0298 278.2598 312.5898 278.4102 323.1499 278.5498 c
342.71 278.7998 362.2998 279.0596 381.8501 279.6797 c
401.04 280.2803 420.25 281.0898 439.3799 282.7197 c
449.0898 283.5498 458.7402 284.5801 468.3896 285.9297 c
476.5303 287.0801 484.6797 288.5303 492.6797 290.4297 c
496.3701 291.3096 500.1299 292.3096 503.7305 293.4902 c
505.5596 294.0996 507.4004 294.7002 509.2002 295.4102 c
514.5098 297.48 519.4199 299.7998 523.9404 303.29 c
523.9199 303.2798 523.9004 303.2598 523.8799 303.2402 c
532.3701 311.0601 540.0195 319.7402 547.2998 328.6802 c
551.6104 333.9902 555.8604 339.3398 560.0703 344.7202 c
561.2598 346.2402 562.4404 347.79 563.6602 349.29 c
564.0996 349.8301 564.5801 350.3701 565.0498 350.8999 c
565.9297 351.9199 566.8203 352.9302 567.7197 353.9302 c
571 357.5698 574.3203 361.0601 577.9502 364.3599 c
583.7695 369.6401 590.4697 374.3901 597.96 376.9399 c
600.1602 377.6802 602.3496 378.23 604.6299 378.6001 c
605.75 378.7798 606.8496 378.8599 607.9697 378.98 c
607.46 378.8701 606.8496 378.8398 606.3203 378.7598 c
605.5596 378.6401 604.8096 378.5 604.0498 378.3501 c
601.4004 377.8101 598.7002 376.9199 596.2197 375.8599 c
589.3496 372.9199 583.6602 368.4702 578.21 363.4302 c
576.6797 362.0098 575.1602 360.48 573.7402 358.96 c
570.5498 355.5601 567.5303 352.1099 564.54 348.5498 c
564.54 348.5601 564.5498 348.5601 564.5498 348.5698 c
555.8799 337.2798 547.2803 325.8501 537.8096 315.21 c
535.0801 312.1401 532.2803 309.1699 529.3799 306.2598 c
528.4502 305.3198 527.5 304.4102 526.54 303.4902 c
526.0303 303.0098 525.5 302.4702 524.96 302.02 c
524.5498 301.6699 524.0596 301.3198 523.6201 301 c
521.8496 299.7202 520.0195 298.5898 518.0898 297.5601 c
514.75 295.7803 511.21 294.2803 507.6504 293.0098 c
505.3604 292.1904 503.0303 291.4199 500.7002 290.75 c
495.1104 289.1504 489.5195 287.8203 483.8203 286.71 c
476.75 285.3203 469.6299 284.2402 462.4805 283.3203 c
450.8096 281.8203 439.0703 280.8301 427.3301 280.0303 c
416.5898 279.2998 405.8198 278.8301 395.0698 278.46 c
383.6299 278.0703 372.1699 277.8203 360.7202 277.6904 c
350.21 277.5703 339.7002 277.4902 329.1802 277.46 c
310.3301 277.4004 291.48 277.4697 272.6201 277.4004 c
f
95.3301 265.3799 m
95.6802 265.6699 96.02 265.9697 96.3999 266.2305 c
98.7002 267.7998 101.4102 268.8398 104.1001 269.54 c
107.04 270.2998 110.0898 270.8604 113.1299 271.1699 c
115.0698 271.3701 116.9902 271.54 118.9399 271.6699 c
124.29 272.0303 129.7798 272.0498 135.1299 271.9502 c
139.8999 271.8701 144.6699 271.7803 149.4199 271.4004 c
148.0098 271.1201 146.48 271.0098 145.04 270.9004 c
142.2598 270.6797 139.4702 270.5703 136.6802 270.4805 c
131.4502 270.2998 126.2202 270.2197 120.9902 269.9902 c
118.7402 269.8799 116.5 269.7402 114.2598 269.5801 c
109.1001 269.21 103.77 268.4805 98.8398 266.8496 c
97.6201 266.4502 96.4902 265.9199 95.3301 265.3799 c
f
0 J 0 j 0.5 w1 XR
99.54 284.0098 m
118.1299 310.3501 137.0298 335.9199 159.04 353.73 c
136.6499 348.8701 113.3599 341.8999 95.9302 325.48 c
93.3999 326.2798 97.0298 306.7202 99.54 284.0098 c
Bb
1 (Linear Gradient 1) 91.7651 336.3809 -25.0163 49.7403 1 0 0 1 0 0 Bg
45.074 -21.034 -39.0487 -83.678 111.2896 378.2197 Xm
7123.0977 -3324.0225 -39.0487 -83.678 -7011.8081 3702.2422 Bc
45.074 -21.034 -39.0487 -83.678 111.2896 378.2197 Bm
7123.0977 -3324.0225 -39.0487 -83.678 156.3638 357.1855 Bc
f
0 BB
0 0.992157 1 0 1 0 0 (_201710944) 0 1 Xx
691.5098 381.3701 m
695.1201 375.9702 698.6602 370.4902 700.5195 363.3398 c
716.75 371.7598 l
731.7695 372.3599 l
741.3896 383.1802 l
724.7598 383.27 708.1396 382.8799 691.5098 381.3701 c
f
0 0 0 0 1 1 1 (_204599592) 0 1 Xx
2 j347.77 256.4404 m
332.6299 256.75 317.5098 257.1699 302.3799 257.6797 c
296.79 257.8701 291.21 258.0801 285.6299 258.2998 c
284.0898 258.3604 282.5498 258.4199 281 258.4805 c
280.0898 258.5195 279.1401 258.5303 278.23 258.5996 c
277.3198 258.6602 276.3799 258.6797 275.4702 258.7197 c
273.9399 258.7803 272.3999 258.8496 270.8701 258.9199 c
270.8398 258.9199 269.0601 258.9902 269.0298 259 c
268.4199 259.0498 267.8101 259.0498 267.2002 259.0801 c
266.8901 259.0898 266.5601 259 266.2798 259.1201 c
266.0698 259.21 264.6001 259.1201 264.4502 259.21 c
264.3901 259.2402 264.3901 259.3496 264.3301 259.3799 c
263.8901 260.0898 l
263.8901 260.0996 264.1201 260.6201 264.1401 260.6602 c
264.3398 261.0996 264.52 261.54 264.71 261.9805 c
264.8599 262.3496 l
264.9199 262.4404 265.0498 262.7998 265.1001 262.9199 c
265.27 263.3604 265.4502 263.79 265.6201 264.2305 c
266.2202 265.7803 266.77 267.3398 267.27 268.9199 c
268.8999 274.0195 270.0298 279.2803 270.54 284.6104 c
271.8799 298.3701 269.1499 312.1699 262.0498 324.0898 c
260.1001 327.3599 257.8198 330.52 255.2798 333.3599 c
252.1299 336.8599 248.6699 340.0098 244.8101 342.71 c
239.5098 346.4302 233.7202 349.29 227.5498 351.25 c
234.3799 349.1201 240.6699 346.0698 246.4502 341.8398 c
250.0098 339.2402 253.3398 336.21 256.2402 332.8901 c
267.4102 320.1401 272.6099 303.7598 271.7202 286.9004 c
271.3398 279.7803 269.8999 272.8799 267.6201 266.1904 c
265.3901 260.4502 l
305.0698 259.1904 l
345.6499 258.1201 386.2598 257.6797 426.8496 257.7305 c
452.6699 257.7598 478.5 257.9902 504.3203 258.4297 c
581.1504 260.2998 l
577.6904 271.3799 l
574.7305 283.29 574.1201 295.6904 577.6396 307.6602 c
579.0303 312.3999 581.0098 316.9302 583.5098 321.1899 c
584.9902 323.73 586.6396 326.1401 588.4297 328.4502 c
589.8203 330.0601 l
590.0195 330.3398 l
591.3496 331.9702 592.7305 333.5601 594.1699 335.0801 c
589.8203 330.0601 l
586.2695 325.2598 l
583.9199 321.7598 581.9004 318.0601 580.2998 314.1602 c
576.4502 304.7598 575.1504 294.8799 576.1201 284.7803 c
576.71 278.6699 578 272.7402 579.8398 266.8896 c
580.3701 265.1699 580.96 263.4805 581.5703 261.7998 c
581.7305 261.3701 581.8896 260.9502 582.0498 260.5195 c
582.0801 260.4404 582.1201 260.3496 582.1504 260.2598 c
582.1797 260.1797 582.29 260.0898 582.25 260.0098 c
582.2197 259.96 581.8203 259.3701 581.8203 259.3604 c
579.6797 259.2695 l
579.3301 259.1904 578.96 259.2402 578.6104 259.2305 c
576.4697 259.1396 l
574.71 259.0195 572.9004 258.9902 571.1299 258.9199 c
567.5801 258.7803 564.04 258.6396 560.5 258.5098 c
541.3096 257.7803 522.1104 257.1904 502.9199 256.75 c
451.2197 255.5498 399.48 255.3604 347.77 256.4404 c
f
1 J 1 j 2 w0 XR
93.4902 266.1699 m
95.27 263.4404 99.5601 262.7803 102.5098 262.4297 c
103.3999 262.3203 104.2798 262.2402 105.1699 262.1699 c
122.5298 261.2695 139.8999 260.3604 157.2598 259.46 c
156.9702 259.2998 156.6802 259.1504 156.3999 259 c
156.3999 258.6797 156.4102 258.3496 156.4102 258.0303 c
152.1499 264.7197 149.1602 272.0898 147.8901 279.9404 c
146.98 285.5303 147 291.1396 147.73 296.75 c
147.0698 287.96 148.3101 279.4004 151.5498 271.1904 c
152.3701 269.1201 153.3101 267.0898 154.3501 265.1104 c
154.77 264.3301 155.2402 263.5596 155.6499 262.7695 c
156.0898 261.9199 156.7002 261.0195 157.2202 260.2002 c
157.4199 259.8896 157.6299 259.5801 157.8301 259.2598 c
157.8799 259.1797 157.96 259.1201 157.98 259.0303 c
158.02 258.9297 158 258.21 158 258.0498 c
157.8599 257.9805 157.25 257.6201 157.1401 257.5996 c
153.7402 256.8799 150.2002 258.1104 146.7402 258.3604 c
136.3301 259.1299 125.9302 259.8896 115.52 260.6602 c
111.8999 260.9297 108.27 261.1104 104.6499 261.4902 c
103.6001 261.5996 102.4702 261.8203 101.4399 262.0303 c
98.5898 262.6104 95.0801 263.4902 93.4902 266.1699 c
f
697.7998 299.6602 m
699.5703 285.8398 697.3398 272.8701 691.3096 260.3203 c
691.2803 260.6299 691.25 260.9404 691.2197 261.25 c
690.9297 261.3604 690.6396 261.4697 690.3604 261.5801 c
696.6602 262.8301 702.96 264.0801 709.2598 265.3301 c
709.04 265.1602 708.7998 264.9902 708.5703 264.8301 c
714.2998 275.3301 719.8096 285.9902 724.5996 296.96 c
724.5898 296.9199 724.5801 296.8901 724.5703 296.8501 c
724.6904 297.4902 724.8896 298.1201 725.1797 298.71 c
726.5703 301.4502 729.4199 301.9102 732.21 301.6802 c
732.8701 301.6299 733.6104 301.5298 734.25 301.3799 c
734.3203 301.3701 738.0996 300.4102 738.1699 300.3999 c
738.8301 300.29 739.4805 300.0801 740.1299 299.9102 c
741.4297 299.5898 742.7305 299.2598 744.04 298.9302 c
740.7402 299.5801 737.4502 300.2202 734.1602 300.8599 c
731.54 301.23 727.7402 301.3501 726.2695 298.6299 c
726.0303 298.1899 725.8896 297.7798 725.7695 297.3101 c
725.7002 297.0601 725.6904 296.7798 725.6104 296.54 c
725.4102 295.9004 725.0801 295.2197 724.8496 294.5801 c
724.46 293.5303 724 292.46 723.5703 291.4199 c
722.79 289.54 722 287.6699 721.1699 285.8096 c
719.3398 281.6699 717.4102 277.5703 715.3701 273.5195 c
714.5996 271.9805 713.8203 270.4502 713.0195 268.9297 c
712.7998 268.5098 712.5801 268.0898 712.3604 267.6699 c
711.9102 266.8301 l
711.75 266.4404 711.3799 265.9404 711.2402 265.5596 c
711.1904 265.4102 711.0898 265.2803 711.0098 265.1396 c
710.9404 265 710.9004 264.8301 710.79 264.7197 c
710.7803 264.71 710.3301 263.8799 y
710.3203 263.8604 709.6504 263.3701 709.6396 263.3701 c
708.4297 262.9297 707.1299 262.5996 705.8496 262.6602 c
704.5703 262.7305 703.3203 262.1904 702.0596 261.96 c
694.4805 260.5498 l
693.3496 259.9404 691.9697 259.7305 690.6904 259.8496 c
690.5801 259.8604 689.9697 260.1201 689.8203 260.1797 c
689.8096 260.3203 689.71 261 689.7305 261.0996 c
689.75 261.21 690.1201 261.8701 690.2002 262.0195 c
690.5195 262.6699 690.9404 263.4404 691.2002 264.1104 c
691.3203 264.4102 691.4902 264.7402 691.6299 265.04 c
691.9004 265.6504 692.1797 266.2695 692.4404 266.9004 c
693.21 268.75 693.9102 270.6299 694.54 272.5303 c
697.4297 281.2803 698.5098 290.4697 697.7998 299.6602 c
f
0 J 0 j 0.5 w1 XR
342.0098 379.5801 m
349.4702 383.73 357.9502 387.6802 369.2798 391.0601 c
369.8501 389.6299 l
366.5698 387.71 364.3501 385.7998 364.1099 383.8901 c
357.8901 383.9702 350.5 382.5098 342.0098 379.5801 c
f
u
u
*u
1 J 1 j 0.25 w0 XR
218.7202 196.6699 m
220.96 196.6699 l
221.8101 196.6699 222.4502 196.4502 222.8599 196 c
223.2202 195.6201 223.3901 195.0898 223.3901 194.4297 c
223.3901 193.1797 l
223.3901 192.4805 223.21 191.9404 222.8301 191.5596 c
222.4199 191.1396 221.7998 190.9404 220.96 190.9404 c
218.7202 190.9404 l
218.1899 190.9404 217.7598 191.04 217.4102 191.2598 c
217.2998 191.3301 217.1802 191.4404 217.0498 191.5801 c
217.0498 188.6201 l
216.2202 188.6201 l
216.2202 196.6699 l
217.0498 196.6699 l
217.0498 196.0498 l
217.1699 196.1904 217.29 196.29 217.3999 196.3604 c
217.73 196.5703 218.1499 196.6699 218.6499 196.6699 c
218.7202 196.6699 l
f
1 D
217.0498 194.4297 m
217.0098 193.8096 l
217.0498 193.1797 l
217.0498 192.7197 217.1899 192.3496 217.4702 192.0801 c
217.77 191.7803 218.2202 191.6299 218.8101 191.6299 c
220.6699 191.6299 l
221.2998 191.6299 221.77 191.75 222.0898 192 c
222.3999 192.25 222.5601 192.6396 222.5601 193.1797 c
222.5601 194.4297 l
222.5601 194.9502 222.3999 195.3398 222.0801 195.5996 c
221.75 195.8496 221.29 195.9805 220.6699 195.9805 c
218.8301 195.9805 l
218.23 195.9805 217.79 195.8398 217.5 195.5596 c
217.2002 195.2803 217.0498 194.9004 217.0498 194.4297 c
f
*U
0 D
239.4302 190.96 m
239.4302 198.9902 l
240.2598 198.9902 l
240.2598 190.96 l
239.4302 190.96 l
f
*u
256.21 193.1104 m
256.21 193.5195 256.3501 193.8398 256.6299 194.0703 c
256.9399 194.3301 257.3999 194.4502 258 194.4502 c
261.3501 194.4502 l
261.75 194.4502 262.04 194.3799 262.23 194.2305 c
262.29 194.1904 262.3501 194.1104 262.3901 194 c
262.3901 194.79 l
262.3901 195.1396 262.29 195.4102 262.0801 195.6201 c
261.8301 195.8604 261.4702 195.9805 261 195.9805 c
258.7798 195.9805 l
258.1899 195.9805 257.77 195.8604 257.5298 195.6104 c
257.46 195.5303 257.3999 195.4102 257.3599 195.2402 c
257.3599 195.0303 l
256.5 195.0303 l
256.5 195.2402 l
256.4199 195.5703 256.5898 195.9004 257.0098 196.2305 c
257.3799 196.5303 257.8999 196.6699 258.5601 196.6699 c
261.0698 196.6699 l
261.8198 196.6699 262.3701 196.5 262.73 196.1396 c
263.0601 195.8096 263.23 195.3203 263.23 194.6602 c
263.23 190.96 l
262.3901 190.96 l
262.3901 191.4199 l
262.2998 191.3096 262.2202 191.2402 262.1499 191.1904 c
261.9302 191.04 261.6699 190.96 261.3701 190.96 c
258.1299 190.96 l
257.5 190.96 257.02 191.0801 256.7002 191.3096 c
256.3799 191.5498 256.21 191.9199 256.21 192.4199 c
256.21 193.1104 l
f
1 D
258.2998 193.7598 m
257.7998 193.7598 257.46 193.6904 257.2998 193.5703 c
257.1299 193.4404 257.0498 193.2305 257.0498 192.9297 c
257.0498 192.5098 l
257.0498 192.2305 257.1299 192.0303 257.29 191.9102 c
257.4902 191.75 257.8301 191.6797 258.2998 191.6797 c
261.1401 191.6797 l
261.9702 191.6797 262.3901 192.0195 262.3901 192.7197 c
262.3901 193.0703 262.29 193.3301 262.0801 193.5 c
261.8701 193.6699 261.5601 193.7598 261.1401 193.7598 c
258.2998 193.7598 l
f
*U
0 D
283.71 191.6299 m
284.3398 191.6299 284.7998 191.7998 285.0698 192.1299 c
285.2402 192.3398 285.3198 192.5801 285.3198 192.8604 c
285.3198 192.9697 l
286.1499 192.9697 l
286.1499 192.8799 l
286.1499 192.46 286.04 192.0898 285.8101 191.7695 c
285.4102 191.21 284.7202 190.9404 283.75 190.9404 c
281.1802 190.9404 l
280.3999 190.9404 279.8198 191.1201 279.4399 191.5 c
279.0601 191.8701 278.8599 192.3896 278.8599 193.0703 c
278.8599 194.5 l
278.8599 195.1602 279.0601 195.6797 279.4399 196.0596 c
279.8599 196.4902 280.46 196.7002 281.25 196.7002 c
283.75 196.7002 l
283.77 196.7002 l
284.5 196.7002 285.0698 196.5303 285.48 196.2002 c
285.9302 195.8398 286.1499 195.3701 286.1499 194.7998 c
286.1499 194.71 l
285.3198 194.71 l
285.3198 194.7803 l
285.3198 195.1602 285.1802 195.46 284.8999 195.6797 c
284.6299 195.9004 284.2402 196 283.75 196 c
281.25 196 l
280.75 196 280.3701 195.8799 280.1001 195.6201 c
279.8301 195.3701 279.7002 194.9902 279.7002 194.5 c
279.7002 193.0703 l
279.7002 192.6201 279.8398 192.2695 280.1299 192.0098 c
280.4102 191.7598 280.77 191.6299 281.1899 191.6299 c
283.71 191.6299 l
f
*u
308.1899 194.4502 m
308.1899 194.9297 308.0498 195.3096 307.7798 195.5898 c
307.5098 195.8701 307.1299 196 306.6499 196 c
304.0298 196 l
303.5898 196 303.2402 195.8701 302.9702 195.5898 c
302.7002 195.3096 302.5601 194.9297 302.5601 194.4502 c
308.1899 194.4502 l
f
306.98 190.9404 m
304.1802 190.9404 l
302.5498 190.9404 301.73 191.6504 301.73 193.0898 c
301.73 194.5898 l
301.73 195.1602 301.9399 195.6396 302.3599 196.04 c
302.8101 196.4805 303.4102 196.7002 304.1602 196.7002 c
306.5698 196.7002 l
307.3501 196.7002 307.9702 196.5 308.4102 196.0996 c
308.8198 195.7305 309.02 195.2598 309.02 194.6797 c
309.02 193.7598 l
302.5601 193.7598 l
302.5601 193.2002 l
302.5601 192.6504 302.7202 192.2402 303.02 191.9805 c
303.2798 191.75 303.6602 191.6299 304.1499 191.6299 c
306.8701 191.6299 l
307.3101 191.6299 307.6401 191.7305 307.8599 191.9297 c
308.0801 192.1201 308.1899 192.3701 308.1899 192.6699 c
308.1899 192.79 l
309.02 192.79 l
309.02 192.6699 l
309.02 192.2305 308.8799 191.8496 308.5898 191.54 c
308.23 191.1396 307.6899 190.9404 306.98 190.9404 c
f
*U
342.2598 196.6699 m
343.1299 196.6699 l
345.79 191.7695 l
345.9502 191.7695 l
348.0601 196.6699 l
348.9302 196.6699 l
346.0601 190.21 l
345.7798 189.5703 345.5 189.1504 345.2202 188.9199 c
344.8701 188.6396 344.3701 188.5098 343.6899 188.5098 c
343.4199 188.5098 l
343.4199 189.2002 l
343.8999 189.2002 l
344.25 189.2002 344.5298 189.29 344.75 189.4697 c
344.9702 189.6504 345.2598 190.1504 345.6001 190.96 c
345.3999 190.96 l
342.2598 196.6699 l
f
*u
363.98 194.4502 m
363.98 195.1504 364.1699 195.6904 364.5498 196.0596 c
364.9702 196.4902 365.6201 196.7002 366.48 196.7002 c
368.77 196.7002 l
369.6602 196.7002 370.3101 196.4805 370.73 196.0303 c
371.0898 195.6396 371.27 195.1201 371.27 194.4502 c
371.27 193.2002 l
371.27 192.54 371.0898 192.0098 370.7202 191.6201 c
370.29 191.1602 369.6401 190.9404 368.77 190.9404 c
366.48 190.9404 l
365.6401 190.9404 365.0098 191.1299 364.6001 191.5098 c
364.1899 191.8896 363.98 192.46 363.98 193.2002 c
363.98 193.8301 l
363.98 194.4502 l
f
1 D
364.8198 193.2002 m
364.8198 192.1602 365.3901 191.6299 366.54 191.6299 c
368.7202 191.6299 l
369.2598 191.6299 369.6802 191.7598 369.98 192.0195 c
370.29 192.2803 370.4399 192.6699 370.4399 193.2002 c
370.4399 194.4502 l
370.4399 194.96 370.29 195.3398 370 195.6104 c
369.7002 195.8701 369.27 196 368.7202 196 c
366.54 196 l
365.96 196 365.5298 195.8799 365.2402 195.6299 c
364.96 195.3896 364.8198 194.9902 364.8198 194.4502 c
364.8198 193.2002 l
f
*U
0 D
391.6401 190.9404 m
389.3901 190.9404 l
388.54 190.9404 387.9102 191.1299 387.5 191.5195 c
387.1001 191.9102 386.8901 192.4697 386.8901 193.2002 c
386.8901 196.6699 l
387.73 196.6699 l
387.73 193.1299 l
387.73 192.6396 387.8799 192.2695 388.1699 192.0098 c
388.46 191.7598 388.8701 191.6299 389.3999 191.6299 c
391.6602 191.6299 l
392.1001 191.6299 392.4902 191.75 392.8101 191.9902 c
393.1499 192.25 393.3301 192.6104 393.3301 193.0703 c
393.3301 196.6699 l
394.1401 196.6699 l
394.1401 190.9404 l
393.3301 190.9404 l
393.3301 191.6504 l
393.1802 191.4902 393.0498 191.3701 392.9199 191.29 c
392.5498 191.0596 392.1201 190.9404 391.6401 190.9404 c
f
410.71 190.96 m
409.8799 190.96 l
409.8799 196.6699 l
410.71 196.6699 l
410.71 195.9297 l
410.8101 196.0996 410.8999 196.2305 410.9902 196.2998 c
411.2798 196.5498 411.7002 196.6699 412.2402 196.6699 c
413.8599 196.6699 l
414.6001 196.6699 415.1802 196.4902 415.6001 196.1299 c
416.0601 195.7305 416.29 195.1904 416.29 194.5195 c
416.29 194.3604 l
415.46 194.3604 l
415.46 194.4297 l
415.46 194.7695 415.3799 195.0703 415.21 195.3203 c
414.9302 195.7598 414.4502 195.9805 413.7798 195.9805 c
412.2998 195.9805 l
411.8501 195.9805 411.48 195.8496 411.1699 195.5801 c
410.8701 195.3096 410.71 195 410.71 194.6396 c
410.71 190.96 l
f
451.4404 193 m
451.4404 196 l
455.7598 196 l
455.7598 196.7002 l
451.4404 196.7002 l
451.4404 197.8096 l
450.6104 197.8096 l
450.6104 196.7002 l
449.8896 196.7002 l
449.8896 196 l
450.6104 196 l
450.6104 193.1201 l
450.6104 192.4004 450.79 191.8604 451.1396 191.5 c
451.5 191.1396 452.0098 190.96 452.6699 190.96 c
453.8604 190.96 l
454.8203 190.96 455.5 191.2305 455.9102 191.7803 c
456.1602 192.1299 456.29 192.5703 456.29 193.1104 c
456.29 193.2695 l
455.4502 193.2695 l
455.4502 193.2002 l
455.4502 192.7305 455.3701 192.3896 455.21 192.1699 c
454.96 191.8301 454.4805 191.6504 453.7803 191.6504 c
452.6699 191.6504 l
452.2998 191.6504 452.0098 191.7598 451.7998 191.9805 c
451.5596 192.2197 451.4404 192.5596 451.4404 193 c
f
*u
478.0303 194.4502 m
478.0303 194.9297 477.9004 195.3096 477.6299 195.5898 c
477.3604 195.8701 476.9805 196 476.4902 196 c
473.8799 196 l
473.4404 196 473.0898 195.8701 472.8203 195.5898 c
472.5498 195.3096 472.4102 194.9297 472.4102 194.4502 c
478.0303 194.4502 l
f
476.8301 190.9404 m
474.0303 190.9404 l
472.3896 190.9404 471.5801 191.6504 471.5801 193.0898 c
471.5801 194.5898 l
471.5801 195.1602 471.79 195.6396 472.2002 196.04 c
472.6602 196.4805 473.2598 196.7002 474.0098 196.7002 c
476.4102 196.7002 l
477.2002 196.7002 477.8096 196.5 478.25 196.0996 c
478.6602 195.7305 478.8701 195.2598 478.8701 194.6797 c
478.8701 193.7598 l
472.4102 193.7598 l
472.4102 193.2002 l
472.4102 192.6504 472.5596 192.2402 472.8604 191.9805 c
473.1201 191.75 473.5 191.6299 474 191.6299 c
476.71 191.6299 l
477.1504 191.6299 477.4805 191.7305 477.7002 191.9297 c
477.9199 192.1201 478.0303 192.3701 478.0303 192.6699 c
478.0303 192.79 l
478.8701 192.79 l
478.8701 192.6699 l
478.8701 192.2305 478.7197 191.8496 478.4404 191.54 c
478.0801 191.1396 477.54 190.9404 476.8301 190.9404 c
f
*U
494.4199 196.6699 m
495.4404 196.6699 l
497.5898 194.5703 l
499.7002 196.6699 l
500.7197 196.6699 l
498.0801 194.0596 l
501.1797 190.96 l
500.1396 190.96 l
497.5703 193.5303 l
494.9805 190.96 l
493.9805 190.96 l
497.0596 194.0596 l
494.4199 196.6699 l
f
517.4902 193 m
517.4902 196 l
521.8096 196 l
521.8096 196.7002 l
517.4902 196.7002 l
517.4902 197.8096 l
516.6602 197.8096 l
516.6602 196.7002 l
515.9404 196.7002 l
515.9404 196 l
516.6602 196 l
516.6602 193.1201 l
516.6602 192.4004 516.8398 191.8604 517.1904 191.5 c
517.5498 191.1396 518.0596 190.96 518.7197 190.96 c
519.9102 190.96 l
520.8701 190.96 521.5498 191.2305 521.96 191.7803 c
522.21 192.1299 522.3398 192.5703 522.3398 193.1104 c
522.3398 193.2695 l
521.5 193.2695 l
521.5 193.2002 l
521.5 192.7305 521.4199 192.3896 521.2598 192.1699 c
521.0098 191.8301 520.5303 191.6504 519.8301 191.6504 c
518.7197 191.6504 l
518.3496 191.6504 518.0596 191.7598 517.8496 191.9805 c
517.6104 192.2197 517.4902 192.5596 517.4902 193 c
f
558.3398 196.6699 m
560.5596 196.6699 l
561.4102 196.6699 562.0498 196.4502 562.4697 196.0098 c
562.8496 195.6201 563.04 195.0898 563.04 194.4297 c
563.04 190.96 l
562.21 190.96 l
562.21 194.4297 l
562.21 194.9199 562.0596 195.2998 561.7598 195.5703 c
561.4502 195.8398 561.0596 195.9805 560.5596 195.9805 c
558.3398 195.9805 l
557.8398 195.9805 557.4404 195.8496 557.1299 195.5801 c
556.8301 195.3096 556.6699 194.9297 556.6699 194.4297 c
556.6699 190.96 l
555.8398 190.96 l
555.8398 198.9902 l
556.6699 198.9902 l
556.6699 195.8604 l
556.8301 196.1299 557 196.3096 557.1797 196.4102 c
557.5 196.5898 557.8896 196.6699 558.3398 196.6699 c
f
*u
585.1699 194.4502 m
585.1699 194.9297 585.0303 195.3096 584.7598 195.5898 c
584.4902 195.8701 584.1104 196 583.6299 196 c
581.0098 196 l
580.5703 196 580.2197 195.8701 579.9502 195.5898 c
579.6797 195.3096 579.54 194.9297 579.54 194.4502 c
585.1699 194.4502 l
f
583.96 190.9404 m
581.1602 190.9404 l
579.5303 190.9404 578.71 191.6504 578.71 193.0898 c
578.71 194.5898 l
578.71 195.1602 578.9199 195.6396 579.3398 196.04 c
579.79 196.4805 580.3896 196.7002 581.1396 196.7002 c
583.5498 196.7002 l
584.3301 196.7002 584.9502 196.5 585.3896 196.0996 c
585.7998 195.7305 586 195.2598 586 194.6797 c
586 193.7598 l
579.54 193.7598 l
579.54 193.2002 l
579.54 192.6504 579.7002 192.2402 580 191.9805 c
580.2598 191.75 580.6396 191.6299 581.1299 191.6299 c
583.8496 191.6299 l
584.29 191.6299 584.6201 191.7305 584.8398 191.9297 c
585.0596 192.1201 585.1699 192.3701 585.1699 192.6699 c
585.1699 192.79 l
586 192.79 l
586 192.6699 l
586 192.2305 585.8604 191.8496 585.5703 191.54 c
585.21 191.1396 584.6699 190.9404 583.96 190.9404 c
f
*U
602.5801 190.96 m
601.7402 190.96 l
601.7402 196.6699 l
602.5801 196.6699 l
602.5801 195.9297 l
602.6699 196.0996 602.7598 196.2305 602.8496 196.2998 c
603.1504 196.5498 603.5596 196.6699 604.0996 196.6699 c
605.7197 196.6699 l
606.46 196.6699 607.04 196.4902 607.46 196.1299 c
607.9199 195.7305 608.1504 195.1904 608.1504 194.5195 c
608.1504 194.3604 l
607.3203 194.3604 l
607.3203 194.4297 l
607.3203 194.7695 607.2402 195.0703 607.0801 195.3203 c
606.79 195.7598 606.3096 195.9805 605.6396 195.9805 c
604.1602 195.9805 l
603.71 195.9805 603.3398 195.8496 603.0303 195.5801 c
602.7305 195.3096 602.5801 195 602.5801 194.6396 c
602.5801 190.96 l
f
*u
630.46 194.4502 m
630.46 194.9297 630.3203 195.3096 630.0498 195.5898 c
629.7803 195.8701 629.4004 196 628.9199 196 c
626.2998 196 l
625.8604 196 625.5098 195.8701 625.2402 195.5898 c
624.9697 195.3096 624.8301 194.9297 624.8301 194.4502 c
630.46 194.4502 l
f
629.25 190.9404 m
626.4502 190.9404 l
624.8203 190.9404 624 191.6504 624 193.0898 c
624 194.5898 l
624 195.1602 624.21 195.6396 624.6201 196.04 c
625.0801 196.4805 625.6797 196.7002 626.4297 196.7002 c
628.8398 196.7002 l
629.6201 196.7002 630.2402 196.5 630.6797 196.0996 c
631.0801 195.7305 631.29 195.2598 631.29 194.6797 c
631.29 193.7598 l
624.8301 193.7598 l
624.8301 193.2002 l
624.8301 192.6504 624.9805 192.2402 625.2803 191.9805 c
625.5498 191.75 625.9199 191.6299 626.4199 191.6299 c
629.1396 191.6299 l
629.5801 191.6299 629.9102 191.7305 630.1299 191.9297 c
630.3496 192.1201 630.46 192.3701 630.46 192.6699 c
630.46 192.79 l
631.29 192.79 l
631.29 192.6699 l
631.29 192.2305 631.1504 191.8496 630.8604 191.54 c
630.5 191.1396 629.96 190.9404 629.25 190.9404 c
f
*U
U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
